# Write a ros publisher node that reads a pose from a file and publishes it as a tf frame
# This is a simple example of how to use the online optimization framework

import rospy
import tf
import numpy as np
import os
import sys
import time
import math
import argparse
import rosbag
import rospkg
import yaml
import tf.transformations as tft
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import PoseWithCovarianceStamped
from geometry_msgs.msg import TransformStamped
from geometry_msgs.msg import Transform
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Vector3
from geometry_msgs.msg import Point
from geometry_msgs.msg import Pose

# Parse arguments
parser = argparse.ArgumentParser(description='Publish a pose as a tf frame')
parser.add_argument('--pose_file', type=str, default='pose.txt', help='File containing the pose')
parser.add_argument('--frame_id', type=str, default='world', help='Frame id')
parser.add_argument('--child_frame_id', type=str, default='camera', help='Child frame id')
parser.add_argument('--publish_rate', type=float, default=10.0, help='Publish rate')
args = parser.parse_args()

# Initialize node
rospy.init_node('online_frame_publisher', anonymous=True)

# Initialize tf broadcaster
tf_broadcaster = tf.TransformBroadcaster()

# Read pose from file
pose_file = open(args.pose_file, 'r')
pose = pose_file.readline()
pose = pose.split(' ')
pose = [float(x) for x in pose]
pose_file.close()

# Publish pose as tf frame
while not rospy.is_shutdown():
    tf_broadcaster.sendTransform((pose[0], pose[1], pose[2]), (pose[3], pose[4], pose[5], pose[6]), rospy.Time.now(), args.child_frame_id, args.frame_id)
    rospy.sleep(1.0/args.publish_rate)

# End of file

# The pose.txt file contains the pose of the camera frame with respect to the world frame. The pose is represented as a 7-dimensional vector, 
# where the first 3 elements are the translation and the last 4 elements are the quaternion representing the rotation. The pose.txt file is generated by the online_optimization.py script.

class PoseBroadcaster(object):
    def __init__(self):
        # Read pose from pkl file
        # dict_item = {'score' : cost, 'point': point_optimized}
        with open('result_realtime_handover.pkl', 'rb') as f:
            loaded_dict = pickle.load(f)
        print(loaded_dict)
        task_point = np.array(loaded_dict['point'])   
        task_cost = np.array(loaded_dict['score']) 
        frame_point = np.array(loaded_dict['frame_point'])
        frame_orientation = np.array(loaded_dict['frame_orientation'])
        
        self.tf_broadcaster = tf.TransformBroadcaster()

    def publish(self):
        # Publish pose as tf frame
        self.tf_broadcaster.sendTransform((pose[0], pose[1], pose[2]), (pose[3], pose[4], pose[5], pose[6]), rospy.Time.now(), args.child_frame_id, args.frame_id)

    def geometry_pose_stamped_publisher(self):
        # Publish pose as geometry_msgs/PoseStamped
        pose_msg = PoseStamped()
        pose_msg.header.stamp = rospy.Time.now()
        pose_msg.header.frame_id = args.frame_id
        pose_msg.pose.position.x = pose[0]
        pose_msg.pose.position.y = pose[1]
        pose_msg.pose.position.z = pose[2]
        pose_msg.pose.orientation.x = pose[3]
        pose_msg.pose.orientation.y = pose[4]
        pose_msg.pose.orientation.z = pose[5]
        pose_msg.pose.orientation.w = pose[6]
        self.pose_pub.publish(pose_msg)

    def main(self):
        # Initialize node
        rospy.init_node('online_frame_publisher', anonymous=True)
        # Initialize publisher
        self.pose_pub_task = rospy.Publisher('pose', PoseStamped, queue_size=10)
        # Publish pose
        rate = rospy.Rate(args.publish_rate)
        while not rospy.is_shutdown():
            self.publish()
            self.geometry_pose_stamped_publisher()
            rate.sleep()

if __name__ == '__main__':
    try:
        pb = PoseBroadcaster()
        pb.main()
    except rospy.ROSInterruptException:
        pass